package controller;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

import examspring.RegisterCommand;

public class RegisterCommandValidator implements Validator{

	@Override
	public boolean supports(Class<?> clazz) {
		return RegisterCommand.class.isAssignableFrom(clazz);
	}

	@Override
	public void validate(Object target, Errors errors) {
		RegisterCommand cmd = (RegisterCommand)target;
		String emailRegExp = 
				"^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
		Pattern pattern = Pattern.compile(emailRegExp);
		
		if(cmd.getEmail() == null || cmd.getEmail().trim().isEmpty()) {
			errors.rejectValue("email", "required"); //에러 필드 명/에러 메시지 코드
		} else {
			Matcher matcher = pattern.matcher(cmd.getEmail());
			if(!matcher.matches()) {
				errors.rejectValue("email", "bad");
			}
		}
		
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "name", "required");
		ValidationUtils.rejectIfEmpty(errors, "password", "required");
		ValidationUtils.rejectIfEmpty(errors, "confirmPassword", "required");
		
		if(!cmd.getPassword().isEmpty() && !cmd.getConfirmPassword().isEmpty()) {
			if(!cmd.isPasswordEqualsToConfirmPassword()) {
				errors.rejectValue("confirmPassword", "nomatch");
			}
			
		}
		
	}

}




