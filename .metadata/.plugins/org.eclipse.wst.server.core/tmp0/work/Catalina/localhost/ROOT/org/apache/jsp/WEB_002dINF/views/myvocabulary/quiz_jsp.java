/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-04-07 16:57:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.myvocabulary;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class quiz_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1680246602407L));
    _jspx_dependants.put("jar:file:/D:/javas_ee/myvocab/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/myVocabularyList/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>quiz</title>\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ\" crossorigin=\"anonymous\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<div class = \"my-2\">\r\n");
      out.write("		<form action = \"/login\" method = \"post\">\r\n");
      out.write("			<input type = \"hidden\" name = \"id\"  value = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("			<input type = \"hidden\" name = \"pwd\" value =  \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pwd}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("			<input type = submit value = \"처음으로\">\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div id = \"start\" class=\"col text-center\">\r\n");
      out.write("		<button class=\"btn btn-secondary btn-lg\" onclick=\"start()\">시작하기</button>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div id = \"quiz\"  style = \"display:none\">\r\n");
      out.write("	\r\n");
      out.write("		<div class=\"col text-center\">\r\n");
      out.write("			<button id = \"eng\" type=\"button\" class=\"btn btn-primary\"></button><br>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"col text-center my-3\">\r\n");
      out.write("			<button id = \"op1\" type=\"button\" class=\"btn btn-outline-primary\" onclick='next(this.id)'></button>\r\n");
      out.write("			<button id = \"op2\" type=\"button\" class=\"btn btn-outline-primary\" onclick='next(this.id)'></button>\r\n");
      out.write("			<button id = \"op3\" type=\"button\" class=\"btn btn-outline-primary\" onclick='next(this.id)'></button>\r\n");
      out.write("			<button id = \"op4\" type=\"button\" class=\"btn btn-outline-primary\" onclick='next(this.id)'></button>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("		<div class=\"col text-center\">\r\n");
      out.write("			<h2 id = \"count\" style = \"display:inline;\"></h2>\r\n");
      out.write("			<h2 style = \"display:inline;\">/</h2>\r\n");
      out.write("			<h2 id = \"total\" style = \"display:inline;\"></h2>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("	<div id = \"end\" style = \"display:none\">\r\n");
      out.write("		<div class=\"col text-center\">\r\n");
      out.write("			<button type=\"button\" class=\"btn btn-secondary btn-lg\" onclick=\"location.href='/quiz?id=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("&name=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\">재 시작</button>\r\n");
      out.write("		</div>\r\n");
      out.write("		<h3>결과</h3>\r\n");
      out.write("    <table class=\"table table-sm\" id = \"t\">\r\n");
      out.write("        <colgroup>\r\n");
      out.write("            <col width=10%>\r\n");
      out.write("            <col width=20%>\r\n");
      out.write("            <col width=40%>\r\n");
      out.write("            <col width=30%>\r\n");
      out.write("        </colgroup>\r\n");
      out.write("        \r\n");
      out.write("      \r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>-</th>\r\n");
      out.write("            <th>단어</th>\r\n");
      out.write("            <th>정답</th>\r\n");
      out.write("            <th>결과</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("    </table>\r\n");
      out.write("	\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	function shuffle(array) {\r\n");
      out.write("	 array.sort(() => Math.random() - 0.5);\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function random_quiz(arr){\r\n");
      out.write(" 		//선택지 랜덤화\r\n");
      out.write(" 		shuffle(arr);\r\n");
      out.write(" 		\r\n");
      out.write(" 		var rand = {}\r\n");
      out.write(" 		for(var i in arr){\r\n");
      out.write(" 			var english = arr[i][0];\r\n");
      out.write(" 			var korean = arr[i][1];\r\n");
      out.write(" 			\r\n");
      out.write(" 			\r\n");
      out.write(" 			\r\n");
      out.write(" 			\r\n");
      out.write(" 			let difference = choose.filter(x => x !== korean); \r\n");
      out.write(" 			var options = [korean];\r\n");
      out.write(" 			\r\n");
      out.write(" 			for(var i = 0; i<3; i++){\r\n");
      out.write(" 				\r\n");
      out.write(" 				const random = Math.floor(Math.random() * difference.length)\r\n");
      out.write(" 				options.push(difference[random])\r\n");
      out.write(" 				difference.splice(random,1)\r\n");
      out.write(" 			}\r\n");
      out.write(" 			\r\n");
      out.write(" 			\r\n");
      out.write(" 			\r\n");
      out.write(" 			rand[english] = options;\r\n");
      out.write(" 		}\r\n");
      out.write(" 		\r\n");
      out.write(" 	 return rand	\r\n");
      out.write(" 	}\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	 \r\n");
      out.write(" 	var arr = new Array();\r\n");
      out.write("	var choose = new Array();\r\n");
      out.write("	var english = new Array();\r\n");
      out.write(" 	const hash = {};\r\n");
      out.write(" 	const score = {};\r\n");
      out.write(" 	const db_score = {};\r\n");
      out.write(" 	");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write(" 	\r\n");
      out.write(" 	\r\n");
      out.write(" 	\r\n");
      out.write(" 	\r\n");
      out.write(" 	\r\n");
      out.write(" 	const rand = random_quiz(arr);\r\n");
      out.write(" 	shuffle(english);\r\n");
      out.write(" 	console.log(english);\r\n");
      out.write(" 	console.log(rand);\r\n");
      out.write(" 	\r\n");
      out.write(" 	\r\n");
      out.write(" 	var idx = 0;\r\n");
      out.write(" 	\r\n");
      out.write(" 	function start(){\r\n");
      out.write(" 		document.getElementById(\"quiz\").style.display =\"\";\r\n");
      out.write(" 		document.getElementById(\"start\").style.display =\"none\";\r\n");
      out.write(" 		\r\n");
      out.write(" 		var e = english[idx];\r\n");
      out.write(" 		var op_arr = rand[e];\r\n");
      out.write(" 		shuffle(op_arr);\r\n");
      out.write(" 		console.log(op_arr)\r\n");
      out.write(" 		var option1 = op_arr[0]\r\n");
      out.write(" 		var option2 = op_arr[1]\r\n");
      out.write(" 		var option3 = op_arr[2]\r\n");
      out.write(" 		var option4 = op_arr[3]\r\n");
      out.write(" 		document.getElementById(\"eng\").innerHTML=e;\r\n");
      out.write(" 		document.getElementById(\"op1\").innerHTML=option1;\r\n");
      out.write(" 		document.getElementById(\"op2\").innerHTML=option2;\r\n");
      out.write(" 		document.getElementById(\"op3\").innerHTML=option3;\r\n");
      out.write(" 		document.getElementById(\"op4\").innerHTML=option4;\r\n");
      out.write(" 		document.getElementById(\"total\").innerHTML=english.length;\r\n");
      out.write(" 		document.getElementById(\"count\").innerHTML=idx +1;\r\n");
      out.write(" 		\r\n");
      out.write(" 	}\r\n");
      out.write(" 	\r\n");
      out.write(" \r\n");
      out.write(" 	\r\n");
      out.write(" 	\r\n");
      out.write("	function next(op_id){\r\n");
      out.write("		\r\n");
      out.write("		var e = document.getElementById(\"eng\").innerText;\r\n");
      out.write("		var k = document.getElementById(op_id).innerText;\r\n");
      out.write("		\r\n");
      out.write("		var correct = hash[e];\r\n");
      out.write("		\r\n");
      out.write("		if(k == correct){\r\n");
      out.write("			alert(\"맞았다!\");\r\n");
      out.write("			score[e] += 1\r\n");
      out.write("			\r\n");
      out.write("		}else{\r\n");
      out.write("			alert(\"틀렸다...\");\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	\r\n");
      out.write("		\r\n");
      out.write("	\r\n");
      out.write("		let table_tag = document.getElementById('t');\r\n");
      out.write("		\r\n");
      out.write("		let tr_tag = document.createElement('tr');\r\n");
      out.write("		table_tag.appendChild(tr_tag);\r\n");
      out.write("		if(score[e] == 1){\r\n");
      out.write("			var r = \"맞춤\"\r\n");
      out.write("		}else{ var r = \"틀림\"}\r\n");
      out.write("		\r\n");
      out.write("		var arr2 = [idx+1,e,correct, r];\r\n");
      out.write("		for(var i=0; i<4; i++){\r\n");
      out.write("			let td_tag = document.createElement('td');\r\n");
      out.write("			td_tag.innerHTML = arr2[i];\r\n");
      out.write("			if(r ==\"틀림\"){\r\n");
      out.write("				td_tag.style.backgroundColor = '#F06E6E';\r\n");
      out.write("			}\r\n");
      out.write("			tr_tag.appendChild(td_tag);\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		idx += 1\r\n");
      out.write(" 		if(idx < arr.length){\r\n");
      out.write(" 			\r\n");
      out.write(" 			var e = english[idx];\r\n");
      out.write(" 	 		var op_arr = rand[e];\r\n");
      out.write(" 	 		shuffle(op_arr);\r\n");
      out.write(" 	 		console.log(op_arr)\r\n");
      out.write(" 	 		var option1 = op_arr[0]\r\n");
      out.write(" 	 		var option2 = op_arr[1]\r\n");
      out.write(" 	 		var option3 = op_arr[2]\r\n");
      out.write(" 	 		var option4 = op_arr[3]\r\n");
      out.write(" 	 		document.getElementById(\"eng\").innerHTML=e;\r\n");
      out.write(" 	 		document.getElementById(\"op1\").innerHTML=option1;\r\n");
      out.write(" 	 		document.getElementById(\"op2\").innerHTML=option2;\r\n");
      out.write(" 	 		document.getElementById(\"op3\").innerHTML=option3;\r\n");
      out.write(" 	 		document.getElementById(\"op4\").innerHTML=option4;\r\n");
      out.write(" 	 		document.getElementById(\"count\").innerHTML=idx +1;\r\n");
      out.write(" 		}else{\r\n");
      out.write(" 			document.getElementById(\"end\").style.display =\"\";\r\n");
      out.write(" 			document.getElementById(\"quiz\").style.display =\"none\";\r\n");
      out.write(" 			\r\n");
      out.write(" 			//끝나면 데이터베이스에 점수 업데이트\r\n");
      out.write(" 			const json = JSON.stringify(score);\r\n");
      out.write(" 			const json2 = JSON.stringify(db_score);\r\n");
      out.write(" 			console.log(json);\r\n");
      out.write(" 			XMLHttpRequest = new XMLHttpRequest(); \r\n");
      out.write(" 			XMLHttpRequest.open(\"POST\",\"/score\",true);\r\n");
      out.write(" 			XMLHttpRequest.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\r\n");
      out.write(" 			XMLHttpRequest.send(\"score=\"+json + \"&db_score=\" + json2); \r\n");
      out.write(" 			\r\n");
      out.write(" 		}\r\n");
      out.write(" 		\r\n");
      out.write(" 		\r\n");
      out.write(" 	}; \r\n");
      out.write(" 	\r\n");
      out.write(" 	\r\n");
      out.write(" 	\r\n");
      out.write(" 	\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/myvocabulary/quiz.jsp(124,2) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("w");
      // /WEB-INF/views/myvocabulary/quiz.jsp(124,2) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/myvocabulary/quiz.jsp(124,2) '${list}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${list}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/myvocabulary/quiz.jsp(124,2) name = varStatus type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVarStatus("st");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write(" 		arr.push([\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${w[0]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write(',');
            out.write('"');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${w[1]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write(',');
            out.write('"');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${w[2]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"])\r\n");
            out.write(" 		english.push(\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${w[0]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\");\r\n");
            out.write(" 		choose.push(\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${w[1]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\");\r\n");
            out.write(" 		hash[\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${w[0]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"] =  \"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${w[1]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\r\n");
            out.write(" 		score[\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${w[0]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"] = 0\r\n");
            out.write(" 		db_score[\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${w[0]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"] = \"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${w[2]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\r\n");
            out.write(" 	");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
